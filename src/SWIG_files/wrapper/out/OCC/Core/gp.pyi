from OCC.Core.Exception import *
from OCC.Wrapper.wrapper_utils import Proxy as Proxy, deprecated as deprecated
from six import with_metaclass as with_metaclass
from typing import Any

class _SwigNonDynamicMeta(type):
    __setattr__: Any = ...

class SwigPyIterator:
    thisown: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    __swig_destroy__: Any = ...
    def value(self) -> 'PyObject *': ...
    def incr(self, n: size_t=...) -> 'swig::SwigPyIterator *': ...
    def decr(self, n: size_t=...) -> 'swig::SwigPyIterator *': ...
    def distance(self, x: SwigPyIterator) -> ptrdiff_t: ...
    def equal(self, x: SwigPyIterator) -> bool: ...
    def copy(self) -> 'swig::SwigPyIterator *': ...
    def next(self) -> 'PyObject *': ...
    def __next__(self) -> 'PyObject *': ...
    def previous(self) -> 'PyObject *': ...
    def advance(self, n: ptrdiff_t) -> 'swig::SwigPyIterator *': ...
    def __eq__(self, x: SwigPyIterator) -> bool: ...
    def __ne__(self, x: SwigPyIterator) -> bool: ...
    def __iadd__(self, n: ptrdiff_t) -> 'swig::SwigPyIterator &': ...
    def __isub__(self, n: ptrdiff_t) -> 'swig::SwigPyIterator &': ...
    def __add__(self, n: ptrdiff_t) -> 'swig::SwigPyIterator *': ...
    def __sub__(self, *args: Any) -> ptrdiff_t: ...
    def __iter__(self) -> Any: ...

def process_exception(error: 'Standard_Failure const &', method_name: 'std::string', class_name: 'std::string') -> void: ...

gp_Identity: Any
gp_Rotation: Any
gp_Translation: Any
gp_PntMirror: Any
gp_Ax1Mirror: Any
gp_Ax2Mirror: Any
gp_Scale: Any
gp_CompoundTrsf: Any
gp_Other: Any
gp_EulerAngles: Any
gp_YawPitchRoll: Any
gp_Extrinsic_XYZ: Any
gp_Extrinsic_XZY: Any
gp_Extrinsic_YZX: Any
gp_Extrinsic_YXZ: Any
gp_Extrinsic_ZXY: Any
gp_Extrinsic_ZYX: Any
gp_Intrinsic_XYZ: Any
gp_Intrinsic_XZY: Any
gp_Intrinsic_YZX: Any
gp_Intrinsic_YXZ: Any
gp_Intrinsic_ZXY: Any
gp_Intrinsic_ZYX: Any
gp_Extrinsic_XYX: Any
gp_Extrinsic_XZX: Any
gp_Extrinsic_YZY: Any
gp_Extrinsic_YXY: Any
gp_Extrinsic_ZYZ: Any
gp_Extrinsic_ZXZ: Any
gp_Intrinsic_XYX: Any
gp_Intrinsic_XZX: Any
gp_Intrinsic_YZY: Any
gp_Intrinsic_YXY: Any
gp_Intrinsic_ZXZ: Any
gp_Intrinsic_ZYZ: Any

class gp_TrsfForm:
    gp_Identity: int = ...
    gp_Rotation: int = ...
    gp_Translation: int = ...
    gp_PntMirror: int = ...
    gp_Ax1Mirror: int = ...
    gp_Ax2Mirror: int = ...
    gp_Scale: int = ...
    gp_CompoundTrsf: int = ...
    gp_Other: int = ...

class gp_EulerSequence:
    gp_EulerAngles: int = ...
    gp_YawPitchRoll: int = ...
    gp_Extrinsic_XYZ: int = ...
    gp_Extrinsic_XZY: int = ...
    gp_Extrinsic_YZX: int = ...
    gp_Extrinsic_YXZ: int = ...
    gp_Extrinsic_ZXY: int = ...
    gp_Extrinsic_ZYX: int = ...
    gp_Intrinsic_XYZ: int = ...
    gp_Intrinsic_XZY: int = ...
    gp_Intrinsic_YZX: int = ...
    gp_Intrinsic_YXZ: int = ...
    gp_Intrinsic_ZXY: int = ...
    gp_Intrinsic_ZYX: int = ...
    gp_Extrinsic_XYX: int = ...
    gp_Extrinsic_XZX: int = ...
    gp_Extrinsic_YZY: int = ...
    gp_Extrinsic_YXY: int = ...
    gp_Extrinsic_ZYZ: int = ...
    gp_Extrinsic_ZXZ: int = ...
    gp_Intrinsic_XYX: int = ...
    gp_Intrinsic_XZX: int = ...
    gp_Intrinsic_YZY: int = ...
    gp_Intrinsic_YXY: int = ...
    gp_Intrinsic_ZXZ: int = ...
    gp_Intrinsic_ZYZ: int = ...

class gp:
    thisown: Any = ...
    @staticmethod
    def DX(*args: Any) -> 'gp_Dir const': ...
    @staticmethod
    def DX2d(*args: Any) -> 'gp_Dir2d const': ...
    @staticmethod
    def DY(*args: Any) -> 'gp_Dir const': ...
    @staticmethod
    def DY2d(*args: Any) -> 'gp_Dir2d const': ...
    @staticmethod
    def DZ(*args: Any) -> 'gp_Dir const': ...
    @staticmethod
    def OX(*args: Any) -> 'gp_Ax1 const': ...
    @staticmethod
    def OX2d(*args: Any) -> 'gp_Ax2d const': ...
    @staticmethod
    def OY(*args: Any) -> 'gp_Ax1 const': ...
    @staticmethod
    def OY2d(*args: Any) -> 'gp_Ax2d const': ...
    @staticmethod
    def OZ(*args: Any) -> 'gp_Ax1 const': ...
    @staticmethod
    def Origin(*args: Any) -> 'gp_Pnt const': ...
    @staticmethod
    def Origin2d(*args: Any) -> 'gp_Pnt2d const': ...
    @staticmethod
    def Resolution(*args: Any) -> Standard_Real: ...
    @staticmethod
    def XOY(*args: Any) -> 'gp_Ax2 const': ...
    @staticmethod
    def YOZ(*args: Any) -> 'gp_Ax2 const': ...
    @staticmethod
    def ZOX(*args: Any) -> 'gp_Ax2 const': ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...

def gp_DX(*args: Any) -> 'gp_Dir const': ...
def gp_DX2d(*args: Any) -> 'gp_Dir2d const': ...
def gp_DY(*args: Any) -> 'gp_Dir const': ...
def gp_DY2d(*args: Any) -> 'gp_Dir2d const': ...
def gp_DZ(*args: Any) -> 'gp_Dir const': ...
def gp_OX(*args: Any) -> 'gp_Ax1 const': ...
def gp_OX2d(*args: Any) -> 'gp_Ax2d const': ...
def gp_OY(*args: Any) -> 'gp_Ax1 const': ...
def gp_OY2d(*args: Any) -> 'gp_Ax2d const': ...
def gp_OZ(*args: Any) -> 'gp_Ax1 const': ...
def gp_Origin(*args: Any) -> 'gp_Pnt const': ...
def gp_Origin2d(*args: Any) -> 'gp_Pnt2d const': ...
def gp_Resolution(*args: Any) -> Standard_Real: ...
def gp_XOY(*args: Any) -> 'gp_Ax2 const': ...
def gp_YOZ(*args: Any) -> 'gp_Ax2 const': ...
def gp_ZOX(*args: Any) -> 'gp_Ax2 const': ...

class gp_Ax1:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Direction(self, *args: Any) -> 'gp_Dir const': ...
    def IsCoaxial(self, *args: Any) -> Standard_Boolean: ...
    def IsNormal(self, *args: Any) -> Standard_Boolean: ...
    def IsOpposite(self, *args: Any) -> Standard_Boolean: ...
    def IsParallel(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Ax1: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Ax1: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Ax1: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Ax1: ...
    def SetDirection(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Ax1: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Ax2:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Direction(self, *args: Any) -> 'gp_Dir const': ...
    def IsCoplanar(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Ax2: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Ax2: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Ax2: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetDirection(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetXDirection(self, *args: Any) -> void: ...
    def SetYDirection(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Ax2: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Ax2: ...
    def XDirection(self, *args: Any) -> 'gp_Dir const': ...
    def YDirection(self, *args: Any) -> 'gp_Dir const': ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Ax22d:
    thisown: Any = ...
    def Location(self, *args: Any) -> 'gp_Pnt2d const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Ax22d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Ax22d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Ax22d: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetXAxis(self, *args: Any) -> void: ...
    def SetXDirection(self, *args: Any) -> void: ...
    def SetYAxis(self, *args: Any) -> void: ...
    def SetYDirection(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Ax22d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Ax22d: ...
    def XAxis(self, *args: Any) -> gp_Ax2d: ...
    def XDirection(self, *args: Any) -> 'gp_Dir2d const': ...
    def YAxis(self, *args: Any) -> gp_Ax2d: ...
    def YDirection(self, *args: Any) -> 'gp_Dir2d const': ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Ax2d:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Direction(self, *args: Any) -> 'gp_Dir2d const': ...
    def IsCoaxial(self, *args: Any) -> Standard_Boolean: ...
    def IsNormal(self, *args: Any) -> Standard_Boolean: ...
    def IsOpposite(self, *args: Any) -> Standard_Boolean: ...
    def IsParallel(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt2d const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Ax2d: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Ax2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Ax2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Ax2d: ...
    def SetDirection(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Ax2d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Ax2d: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Ax3:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Ax2(self, *args: Any) -> gp_Ax2: ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Direct(self, *args: Any) -> Standard_Boolean: ...
    def Direction(self, *args: Any) -> 'gp_Dir const': ...
    def IsCoplanar(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Ax3: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Ax3: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Ax3: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetDirection(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetXDirection(self, *args: Any) -> void: ...
    def SetYDirection(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Ax3: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Ax3: ...
    def XDirection(self, *args: Any) -> 'gp_Dir const': ...
    def XReverse(self, *args: Any) -> void: ...
    def YDirection(self, *args: Any) -> 'gp_Dir const': ...
    def YReverse(self, *args: Any) -> void: ...
    def ZReverse(self, *args: Any) -> void: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Circ:
    thisown: Any = ...
    def Area(self, *args: Any) -> Standard_Real: ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Contains(self, *args: Any) -> Standard_Boolean: ...
    def Distance(self, *args: Any) -> Standard_Real: ...
    def Length(self, *args: Any) -> Standard_Real: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Circ: ...
    def Position(self, *args: Any) -> 'gp_Ax2 const': ...
    def Radius(self, *args: Any) -> Standard_Real: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Circ: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Circ: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def SetRadius(self, *args: Any) -> void: ...
    def SquareDistance(self, *args: Any) -> Standard_Real: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Circ: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Circ: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Circ2d:
    thisown: Any = ...
    def Area(self, *args: Any) -> Standard_Real: ...
    def Axis(self, *args: Any) -> 'gp_Ax22d const': ...
    def Coefficients(self, *args: Any) -> void: ...
    def Contains(self, *args: Any) -> Standard_Boolean: ...
    def Distance(self, *args: Any) -> Standard_Real: ...
    def IsDirect(self, *args: Any) -> Standard_Boolean: ...
    def Length(self, *args: Any) -> Standard_Real: ...
    def Location(self, *args: Any) -> 'gp_Pnt2d const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Circ2d: ...
    def Position(self, *args: Any) -> 'gp_Ax22d const': ...
    def Radius(self, *args: Any) -> Standard_Real: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Circ2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Circ2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Circ2d: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetRadius(self, *args: Any) -> void: ...
    def SetXAxis(self, *args: Any) -> void: ...
    def SetYAxis(self, *args: Any) -> void: ...
    def SquareDistance(self, *args: Any) -> Standard_Real: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Circ2d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Circ2d: ...
    def XAxis(self, *args: Any) -> gp_Ax2d: ...
    def YAxis(self, *args: Any) -> gp_Ax2d: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Cone:
    thisown: Any = ...
    def Apex(self, *args: Any) -> gp_Pnt: ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Coefficients(self, *args: Any) -> void: ...
    def Direct(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Cone: ...
    def Position(self, *args: Any) -> 'gp_Ax3 const': ...
    def RefRadius(self, *args: Any) -> Standard_Real: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Cone: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Cone: ...
    def SemiAngle(self, *args: Any) -> Standard_Real: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def SetRadius(self, *args: Any) -> void: ...
    def SetSemiAngle(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Cone: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Cone: ...
    def UReverse(self, *args: Any) -> void: ...
    def VReverse(self, *args: Any) -> void: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Cylinder:
    thisown: Any = ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Coefficients(self, *args: Any) -> void: ...
    def Direct(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Cylinder: ...
    def Position(self, *args: Any) -> 'gp_Ax3 const': ...
    def Radius(self, *args: Any) -> Standard_Real: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Cylinder: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Cylinder: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def SetRadius(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Cylinder: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Cylinder: ...
    def UReverse(self, *args: Any) -> void: ...
    def VReverse(self, *args: Any) -> void: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Dir:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def AngleWithRef(self, *args: Any) -> Standard_Real: ...
    def Coord(self, *args: Any) -> void: ...
    def Cross(self, *args: Any) -> void: ...
    def CrossCross(self, *args: Any) -> void: ...
    def CrossCrossed(self, *args: Any) -> gp_Dir: ...
    def Crossed(self, *args: Any) -> gp_Dir: ...
    def Dot(self, *args: Any) -> Standard_Real: ...
    def DotCross(self, *args: Any) -> Standard_Real: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def IsNormal(self, *args: Any) -> Standard_Boolean: ...
    def IsOpposite(self, *args: Any) -> Standard_Boolean: ...
    def IsParallel(self, *args: Any) -> Standard_Boolean: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Dir: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Dir: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Dir: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetXYZ(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def SetZ(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Dir: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def XYZ(self, *args: Any) -> 'gp_XYZ const': ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def Z(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> Standard_Real: ...
    def __neg__(self, *args: Any) -> gp_Dir: ...
    __swig_destroy__: Any = ...

class gp_Dir2d:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Coord(self, *args: Any) -> void: ...
    def Crossed(self, *args: Any) -> Standard_Real: ...
    def Dot(self, *args: Any) -> Standard_Real: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def IsNormal(self, *args: Any) -> Standard_Boolean: ...
    def IsOpposite(self, *args: Any) -> Standard_Boolean: ...
    def IsParallel(self, *args: Any) -> Standard_Boolean: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Dir2d: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Dir2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Dir2d: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetXY(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Dir2d: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def XY(self, *args: Any) -> 'gp_XY const': ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> Standard_Real: ...
    def __neg__(self, *args: Any) -> gp_Dir2d: ...
    __swig_destroy__: Any = ...

class gp_Elips:
    thisown: Any = ...
    def Area(self, *args: Any) -> Standard_Real: ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Directrix1(self, *args: Any) -> gp_Ax1: ...
    def Directrix2(self, *args: Any) -> gp_Ax1: ...
    def Eccentricity(self, *args: Any) -> Standard_Real: ...
    def Focal(self, *args: Any) -> Standard_Real: ...
    def Focus1(self, *args: Any) -> gp_Pnt: ...
    def Focus2(self, *args: Any) -> gp_Pnt: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def MajorRadius(self, *args: Any) -> Standard_Real: ...
    def MinorRadius(self, *args: Any) -> Standard_Real: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Elips: ...
    def Parameter(self, *args: Any) -> Standard_Real: ...
    def Position(self, *args: Any) -> 'gp_Ax2 const': ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Elips: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Elips: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetMajorRadius(self, *args: Any) -> void: ...
    def SetMinorRadius(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Elips: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Elips: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Elips2d:
    thisown: Any = ...
    def Area(self, *args: Any) -> Standard_Real: ...
    def Axis(self, *args: Any) -> 'gp_Ax22d const': ...
    def Coefficients(self, *args: Any) -> void: ...
    def Directrix1(self, *args: Any) -> gp_Ax2d: ...
    def Directrix2(self, *args: Any) -> gp_Ax2d: ...
    def Eccentricity(self, *args: Any) -> Standard_Real: ...
    def Focal(self, *args: Any) -> Standard_Real: ...
    def Focus1(self, *args: Any) -> gp_Pnt2d: ...
    def Focus2(self, *args: Any) -> gp_Pnt2d: ...
    def IsDirect(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt2d const': ...
    def MajorRadius(self, *args: Any) -> Standard_Real: ...
    def MinorRadius(self, *args: Any) -> Standard_Real: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Elips2d: ...
    def Parameter(self, *args: Any) -> Standard_Real: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Elips2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Elips2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Elips2d: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetMajorRadius(self, *args: Any) -> void: ...
    def SetMinorRadius(self, *args: Any) -> void: ...
    def SetXAxis(self, *args: Any) -> void: ...
    def SetYAxis(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Elips2d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Elips2d: ...
    def XAxis(self, *args: Any) -> gp_Ax2d: ...
    def YAxis(self, *args: Any) -> gp_Ax2d: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_GTrsf:
    thisown: Any = ...
    def Form(self, *args: Any) -> gp_TrsfForm: ...
    def Invert(self, *args: Any) -> void: ...
    def Inverted(self, *args: Any) -> gp_GTrsf: ...
    def IsNegative(self, *args: Any) -> Standard_Boolean: ...
    def IsSingular(self, *args: Any) -> Standard_Boolean: ...
    def Multiplied(self, *args: Any) -> gp_GTrsf: ...
    def Multiply(self, *args: Any) -> void: ...
    def Power(self, *args: Any) -> void: ...
    def Powered(self, *args: Any) -> gp_GTrsf: ...
    def PreMultiply(self, *args: Any) -> void: ...
    def SetAffinity(self, *args: Any) -> void: ...
    def SetForm(self, *args: Any) -> void: ...
    def SetTranslationPart(self, *args: Any) -> void: ...
    def SetTrsf(self, *args: Any) -> void: ...
    def SetValue(self, *args: Any) -> void: ...
    def SetVectorialPart(self, *args: Any) -> void: ...
    def Transforms(self, *args: Any) -> void: ...
    def TranslationPart(self, *args: Any) -> 'gp_XYZ const': ...
    def Trsf(self, *args: Any) -> gp_Trsf: ...
    def Value(self, *args: Any) -> Standard_Real: ...
    def VectorialPart(self, *args: Any) -> 'gp_Mat const': ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_GTrsf: ...
    def __imul_wrapper__(self, other: gp_GTrsf) -> void: ...
    def __imul__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_GTrsf2d:
    thisown: Any = ...
    def Form(self, *args: Any) -> gp_TrsfForm: ...
    def Invert(self, *args: Any) -> void: ...
    def Inverted(self, *args: Any) -> gp_GTrsf2d: ...
    def IsNegative(self, *args: Any) -> Standard_Boolean: ...
    def IsSingular(self, *args: Any) -> Standard_Boolean: ...
    def Multiplied(self, *args: Any) -> gp_GTrsf2d: ...
    def Multiply(self, *args: Any) -> void: ...
    def Power(self, *args: Any) -> void: ...
    def Powered(self, *args: Any) -> gp_GTrsf2d: ...
    def PreMultiply(self, *args: Any) -> void: ...
    def SetAffinity(self, *args: Any) -> void: ...
    def SetTranslationPart(self, *args: Any) -> void: ...
    def SetTrsf2d(self, *args: Any) -> void: ...
    def SetValue(self, *args: Any) -> void: ...
    def SetVectorialPart(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_XY: ...
    def Transforms(self, *args: Any) -> void: ...
    def TranslationPart(self, *args: Any) -> 'gp_XY const': ...
    def Trsf2d(self, *args: Any) -> gp_Trsf2d: ...
    def Value(self, *args: Any) -> Standard_Real: ...
    def VectorialPart(self, *args: Any) -> 'gp_Mat2d const': ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_GTrsf2d: ...
    def __imul_wrapper__(self, other: gp_GTrsf2d) -> void: ...
    def __imul__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_Hypr:
    thisown: Any = ...
    def Asymptote1(self, *args: Any) -> gp_Ax1: ...
    def Asymptote2(self, *args: Any) -> gp_Ax1: ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def ConjugateBranch1(self, *args: Any) -> gp_Hypr: ...
    def ConjugateBranch2(self, *args: Any) -> gp_Hypr: ...
    def Directrix1(self, *args: Any) -> gp_Ax1: ...
    def Directrix2(self, *args: Any) -> gp_Ax1: ...
    def Eccentricity(self, *args: Any) -> Standard_Real: ...
    def Focal(self, *args: Any) -> Standard_Real: ...
    def Focus1(self, *args: Any) -> gp_Pnt: ...
    def Focus2(self, *args: Any) -> gp_Pnt: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def MajorRadius(self, *args: Any) -> Standard_Real: ...
    def MinorRadius(self, *args: Any) -> Standard_Real: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Hypr: ...
    def OtherBranch(self, *args: Any) -> gp_Hypr: ...
    def Parameter(self, *args: Any) -> Standard_Real: ...
    def Position(self, *args: Any) -> 'gp_Ax2 const': ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Hypr: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Hypr: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetMajorRadius(self, *args: Any) -> void: ...
    def SetMinorRadius(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Hypr: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Hypr: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Hypr2d:
    thisown: Any = ...
    def Asymptote1(self, *args: Any) -> gp_Ax2d: ...
    def Asymptote2(self, *args: Any) -> gp_Ax2d: ...
    def Axis(self, *args: Any) -> 'gp_Ax22d const': ...
    def Coefficients(self, *args: Any) -> void: ...
    def ConjugateBranch1(self, *args: Any) -> gp_Hypr2d: ...
    def ConjugateBranch2(self, *args: Any) -> gp_Hypr2d: ...
    def Directrix1(self, *args: Any) -> gp_Ax2d: ...
    def Directrix2(self, *args: Any) -> gp_Ax2d: ...
    def Eccentricity(self, *args: Any) -> Standard_Real: ...
    def Focal(self, *args: Any) -> Standard_Real: ...
    def Focus1(self, *args: Any) -> gp_Pnt2d: ...
    def Focus2(self, *args: Any) -> gp_Pnt2d: ...
    def IsDirect(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt2d const': ...
    def MajorRadius(self, *args: Any) -> Standard_Real: ...
    def MinorRadius(self, *args: Any) -> Standard_Real: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Hypr2d: ...
    def OtherBranch(self, *args: Any) -> gp_Hypr2d: ...
    def Parameter(self, *args: Any) -> Standard_Real: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Hypr2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Hypr2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Hypr2d: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetMajorRadius(self, *args: Any) -> void: ...
    def SetMinorRadius(self, *args: Any) -> void: ...
    def SetXAxis(self, *args: Any) -> void: ...
    def SetYAxis(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Hypr2d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Hypr2d: ...
    def XAxis(self, *args: Any) -> gp_Ax2d: ...
    def YAxis(self, *args: Any) -> gp_Ax2d: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Lin:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Contains(self, *args: Any) -> Standard_Boolean: ...
    def Direction(self, *args: Any) -> 'gp_Dir const': ...
    def Distance(self, *args: Any) -> Standard_Real: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Lin: ...
    def Normal(self, *args: Any) -> gp_Lin: ...
    def Position(self, *args: Any) -> 'gp_Ax1 const': ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Lin: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Lin: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Lin: ...
    def SetDirection(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def SquareDistance(self, *args: Any) -> Standard_Real: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Lin: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Lin: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Lin2d:
    thisown: Any = ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Coefficients(self, *args: Any) -> void: ...
    def Contains(self, *args: Any) -> Standard_Boolean: ...
    def Direction(self, *args: Any) -> 'gp_Dir2d const': ...
    def Distance(self, *args: Any) -> Standard_Real: ...
    def Location(self, *args: Any) -> 'gp_Pnt2d const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Lin2d: ...
    def Normal(self, *args: Any) -> gp_Lin2d: ...
    def Position(self, *args: Any) -> 'gp_Ax2d const': ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Lin2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Lin2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Lin2d: ...
    def SetDirection(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def SquareDistance(self, *args: Any) -> Standard_Real: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Lin2d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Lin2d: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Mat:
    thisown: Any = ...
    def Add(self, *args: Any) -> void: ...
    def Added(self, *args: Any) -> gp_Mat: ...
    def GetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const') -> Standard_Real: ...
    def SetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const', value: Standard_Real) -> void: ...
    def Column(self, *args: Any) -> gp_XYZ: ...
    def Determinant(self, *args: Any) -> Standard_Real: ...
    def Diagonal(self, *args: Any) -> gp_XYZ: ...
    def Divide(self, *args: Any) -> void: ...
    def Divided(self, *args: Any) -> gp_Mat: ...
    def DumpJsonToString(self, depth: int=...) -> 'std::string': ...
    def Invert(self, *args: Any) -> void: ...
    def Inverted(self, *args: Any) -> gp_Mat: ...
    def IsSingular(self, *args: Any) -> Standard_Boolean: ...
    def Multiplied(self, *args: Any) -> gp_Mat: ...
    def Multiply(self, *args: Any) -> void: ...
    def Power(self, *args: Any) -> void: ...
    def Powered(self, *args: Any) -> gp_Mat: ...
    def PreMultiply(self, *args: Any) -> void: ...
    def Row(self, *args: Any) -> gp_XYZ: ...
    def SetCol(self, *args: Any) -> void: ...
    def SetCols(self, *args: Any) -> void: ...
    def SetCross(self, *args: Any) -> void: ...
    def SetDiagonal(self, *args: Any) -> void: ...
    def SetDot(self, *args: Any) -> void: ...
    def SetIdentity(self, *args: Any) -> void: ...
    def SetRotation(self, *args: Any) -> void: ...
    def SetRow(self, *args: Any) -> void: ...
    def SetRows(self, *args: Any) -> void: ...
    def SetScale(self, *args: Any) -> void: ...
    def SetValue(self, *args: Any) -> void: ...
    def Subtract(self, *args: Any) -> void: ...
    def Subtracted(self, *args: Any) -> gp_Mat: ...
    def Transpose(self, *args: Any) -> void: ...
    def Transposed(self, *args: Any) -> gp_Mat: ...
    def Value(self, *args: Any) -> 'Standard_Real const &': ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_Mat: ...
    def __imul__(self, right: Any): ...
    def __imul_wrapper__(self, *args: Any) -> void: ...
    def __imul__(self, right: Any): ...
    def __add__(self, *args: Any) -> gp_Mat: ...
    def __iadd_wrapper__(self, other: gp_Mat) -> void: ...
    def __iadd__(self, right: Any): ...
    def __sub__(self, *args: Any) -> gp_Mat: ...
    def __isub_wrapper__(self, other: gp_Mat) -> void: ...
    def __isub__(self, right: Any): ...
    def __truediv__(self, *args: Any): ...
    __div__: Any = ...
    def __itruediv_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __itruediv__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_Mat2d:
    thisown: Any = ...
    def Add(self, *args: Any) -> void: ...
    def Added(self, *args: Any) -> gp_Mat2d: ...
    def GetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const') -> Standard_Real: ...
    def SetChangeValue(self, Row: 'Standard_Integer const', Col: 'Standard_Integer const', value: Standard_Real) -> void: ...
    def Column(self, *args: Any) -> gp_XY: ...
    def Determinant(self, *args: Any) -> Standard_Real: ...
    def Diagonal(self, *args: Any) -> gp_XY: ...
    def Divide(self, *args: Any) -> void: ...
    def Divided(self, *args: Any) -> gp_Mat2d: ...
    def Invert(self, *args: Any) -> void: ...
    def Inverted(self, *args: Any) -> gp_Mat2d: ...
    def IsSingular(self, *args: Any) -> Standard_Boolean: ...
    def Multiplied(self, *args: Any) -> gp_Mat2d: ...
    def Multiply(self, *args: Any) -> void: ...
    def Power(self, *args: Any) -> void: ...
    def Powered(self, *args: Any) -> gp_Mat2d: ...
    def PreMultiply(self, *args: Any) -> void: ...
    def Row(self, *args: Any) -> gp_XY: ...
    def SetCol(self, *args: Any) -> void: ...
    def SetCols(self, *args: Any) -> void: ...
    def SetDiagonal(self, *args: Any) -> void: ...
    def SetIdentity(self, *args: Any) -> void: ...
    def SetRotation(self, *args: Any) -> void: ...
    def SetRow(self, *args: Any) -> void: ...
    def SetRows(self, *args: Any) -> void: ...
    def SetScale(self, *args: Any) -> void: ...
    def SetValue(self, *args: Any) -> void: ...
    def Subtract(self, *args: Any) -> void: ...
    def Subtracted(self, *args: Any) -> gp_Mat2d: ...
    def Transpose(self, *args: Any) -> void: ...
    def Transposed(self, *args: Any) -> gp_Mat2d: ...
    def Value(self, *args: Any) -> 'Standard_Real const &': ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_Mat2d: ...
    def __imul_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __imul__(self, right: Any): ...
    def __add__(self, *args: Any) -> gp_Mat2d: ...
    def __iadd_wrapper__(self, other: gp_Mat2d) -> void: ...
    def __iadd__(self, right: Any): ...
    def __sub__(self, *args: Any) -> gp_Mat2d: ...
    def __isub_wrapper__(self, other: gp_Mat2d) -> void: ...
    def __isub__(self, right: Any): ...
    def __truediv__(self, *args: Any): ...
    __div__: Any = ...
    def __itruediv_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __itruediv__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_Parab:
    thisown: Any = ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Directrix(self, *args: Any) -> gp_Ax1: ...
    def Focal(self, *args: Any) -> Standard_Real: ...
    def Focus(self, *args: Any) -> gp_Pnt: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Parab: ...
    def Parameter(self, *args: Any) -> Standard_Real: ...
    def Position(self, *args: Any) -> 'gp_Ax2 const': ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Parab: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Parab: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetFocal(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Parab: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Parab: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Parab2d:
    thisown: Any = ...
    def Axis(self, *args: Any) -> gp_Ax22d: ...
    def Coefficients(self, *args: Any) -> void: ...
    def Directrix(self, *args: Any) -> gp_Ax2d: ...
    def Focal(self, *args: Any) -> Standard_Real: ...
    def Focus(self, *args: Any) -> gp_Pnt2d: ...
    def IsDirect(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> gp_Pnt2d: ...
    def Mirror(self, *args: Any) -> void: ...
    def MirrorAxis(self, *args: Any) -> gp_Ax2d: ...
    def Mirrored(self, *args: Any) -> gp_Parab2d: ...
    def Parameter(self, *args: Any) -> Standard_Real: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Parab2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Parab2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Parab2d: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetFocal(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetMirrorAxis(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Parab2d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Parab2d: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Pln:
    thisown: Any = ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Coefficients(self, *args: Any) -> void: ...
    def Contains(self, *args: Any) -> Standard_Boolean: ...
    def Direct(self, *args: Any) -> Standard_Boolean: ...
    def Distance(self, *args: Any) -> Standard_Real: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Pln: ...
    def Position(self, *args: Any) -> 'gp_Ax3 const': ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Pln: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Pln: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def SquareDistance(self, *args: Any) -> Standard_Real: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Pln: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Pln: ...
    def UReverse(self, *args: Any) -> void: ...
    def VReverse(self, *args: Any) -> void: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Pnt:
    thisown: Any = ...
    def BaryCenter(self, *args: Any) -> void: ...
    def ChangeCoord(self, *args: Any) -> gp_XYZ: ...
    def Coord(self, *args: Any) -> 'gp_XYZ const': ...
    def Distance(self, *args: Any) -> Standard_Real: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Pnt: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Pnt: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Pnt: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetXYZ(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def SetZ(self, *args: Any) -> void: ...
    def SquareDistance(self, *args: Any) -> Standard_Real: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Pnt: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Pnt: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def XYZ(self, *args: Any) -> 'gp_XYZ const': ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def Z(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Pnt2d:
    thisown: Any = ...
    def ChangeCoord(self, *args: Any) -> gp_XY: ...
    def Coord(self, *args: Any) -> 'gp_XY const': ...
    def Distance(self, *args: Any) -> Standard_Real: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Pnt2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Pnt2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Pnt2d: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetXY(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def SquareDistance(self, *args: Any) -> Standard_Real: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Pnt2d: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Pnt2d: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def XY(self, *args: Any) -> 'gp_XY const': ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Quaternion:
    thisown: Any = ...
    def Add(self, *args: Any) -> void: ...
    def Added(self, *args: Any) -> gp_Quaternion: ...
    def Dot(self, *args: Any) -> Standard_Real: ...
    def GetEulerAngles(self, *args: Any) -> void: ...
    def GetMatrix(self, *args: Any) -> gp_Mat: ...
    def GetRotationAngle(self, *args: Any) -> Standard_Real: ...
    def GetVectorAndAngle(self, *args: Any) -> void: ...
    def Invert(self, *args: Any) -> void: ...
    def Inverted(self, *args: Any) -> gp_Quaternion: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def Multiplied(self, *args: Any) -> gp_Quaternion: ...
    def Multiply(self, *args: Any) -> gp_Vec: ...
    def Negated(self, *args: Any) -> gp_Quaternion: ...
    def Norm(self, *args: Any) -> Standard_Real: ...
    def Normalize(self, *args: Any) -> void: ...
    def Normalized(self, *args: Any) -> gp_Quaternion: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Quaternion: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Quaternion: ...
    def Set(self, *args: Any) -> void: ...
    def SetEulerAngles(self, *args: Any) -> void: ...
    def SetIdent(self, *args: Any) -> void: ...
    def SetMatrix(self, *args: Any) -> void: ...
    def SetRotation(self, *args: Any) -> void: ...
    def SetVectorAndAngle(self, *args: Any) -> void: ...
    def SquareNorm(self, *args: Any) -> Standard_Real: ...
    def StabilizeLength(self, *args: Any) -> void: ...
    def Subtract(self, *args: Any) -> void: ...
    def Subtracted(self, *args: Any) -> gp_Quaternion: ...
    def W(self, *args: Any) -> Standard_Real: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def Z(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_Vec: ...
    def __imul__(self, right: Any): ...
    def __imul_wrapper__(self, *args: Any) -> void: ...
    def __imul__(self, right: Any): ...
    def __add__(self, *args: Any) -> gp_Quaternion: ...
    def __iadd_wrapper__(self, other: gp_Quaternion) -> void: ...
    def __iadd__(self, right: Any): ...
    def __neg__(self, *args: Any) -> gp_Quaternion: ...
    def __sub__(self, *args: Any) -> gp_Quaternion: ...
    def __isub_wrapper__(self, other: gp_Quaternion) -> void: ...
    def __isub__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_QuaternionNLerp:
    thisown: Any = ...
    def Init(self, *args: Any) -> void: ...
    def InitFromUnit(self, *args: Any) -> void: ...
    def Interpolate(self, *args: Any) -> void: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_QuaternionSLerp:
    thisown: Any = ...
    def Init(self, *args: Any) -> void: ...
    def InitFromUnit(self, *args: Any) -> void: ...
    def Interpolate(self, *args: Any) -> void: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Sphere:
    thisown: Any = ...
    def Area(self, *args: Any) -> Standard_Real: ...
    def Coefficients(self, *args: Any) -> void: ...
    def Direct(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Sphere: ...
    def Position(self, *args: Any) -> 'gp_Ax3 const': ...
    def Radius(self, *args: Any) -> Standard_Real: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Sphere: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Sphere: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def SetRadius(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Sphere: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Sphere: ...
    def UReverse(self, *args: Any) -> void: ...
    def VReverse(self, *args: Any) -> void: ...
    def Volume(self, *args: Any) -> Standard_Real: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    __swig_destroy__: Any = ...

class gp_Torus:
    thisown: Any = ...
    def Area(self, *args: Any) -> Standard_Real: ...
    def Axis(self, *args: Any) -> 'gp_Ax1 const': ...
    def Direct(self, *args: Any) -> Standard_Boolean: ...
    def Location(self, *args: Any) -> 'gp_Pnt const': ...
    def MajorRadius(self, *args: Any) -> Standard_Real: ...
    def MinorRadius(self, *args: Any) -> Standard_Real: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Torus: ...
    def Position(self, *args: Any) -> 'gp_Ax3 const': ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Torus: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Torus: ...
    def SetAxis(self, *args: Any) -> void: ...
    def SetLocation(self, *args: Any) -> void: ...
    def SetMajorRadius(self, *args: Any) -> void: ...
    def SetMinorRadius(self, *args: Any) -> void: ...
    def SetPosition(self, *args: Any) -> void: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Torus: ...
    def Translate(self, *args: Any) -> void: ...
    def Translated(self, *args: Any) -> gp_Torus: ...
    def UReverse(self, *args: Any) -> void: ...
    def VReverse(self, *args: Any) -> void: ...
    def Volume(self, *args: Any) -> Standard_Real: ...
    def XAxis(self, *args: Any) -> gp_Ax1: ...
    def YAxis(self, *args: Any) -> gp_Ax1: ...
    def __init__(self, *args: Any) -> None: ...
    def Coefficients(self) -> None: ...
    __swig_destroy__: Any = ...

class gp_Trsf:
    thisown: Any = ...
    def DumpJsonToString(self, depth: int=...) -> 'std::string': ...
    def Form(self, *args: Any) -> gp_TrsfForm: ...
    def GetRotation(self, *args: Any) -> gp_Quaternion: ...
    def HVectorialPart(self, *args: Any) -> 'gp_Mat const': ...
    def Invert(self, *args: Any) -> void: ...
    def Inverted(self, *args: Any) -> gp_Trsf: ...
    def IsNegative(self, *args: Any) -> Standard_Boolean: ...
    def Multiplied(self, *args: Any) -> gp_Trsf: ...
    def Multiply(self, *args: Any) -> void: ...
    def Power(self, *args: Any) -> void: ...
    def Powered(self, *args: Any) -> gp_Trsf: ...
    def PreMultiply(self, *args: Any) -> void: ...
    def ScaleFactor(self, *args: Any) -> Standard_Real: ...
    def SetDisplacement(self, *args: Any) -> void: ...
    def SetForm(self, *args: Any) -> void: ...
    def SetMirror(self, *args: Any) -> void: ...
    def SetRotation(self, *args: Any) -> void: ...
    def SetScale(self, *args: Any) -> void: ...
    def SetScaleFactor(self, *args: Any) -> void: ...
    def SetTransformation(self, *args: Any) -> void: ...
    def SetTranslation(self, *args: Any) -> void: ...
    def SetTranslationPart(self, *args: Any) -> void: ...
    def SetValues(self, *args: Any) -> void: ...
    def Transforms(self, *args: Any) -> void: ...
    def TranslationPart(self, *args: Any) -> 'gp_XYZ const': ...
    def Value(self, *args: Any) -> Standard_Real: ...
    def VectorialPart(self, *args: Any) -> gp_Mat: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_Trsf: ...
    def __imul_wrapper__(self, other: gp_Trsf) -> void: ...
    def __imul__(self, right: Any): ...
    def GetMat4(self) -> None: ...
    __swig_destroy__: Any = ...

class gp_Trsf2d:
    thisown: Any = ...
    def Form(self, *args: Any) -> gp_TrsfForm: ...
    def HVectorialPart(self, *args: Any) -> 'gp_Mat2d const': ...
    def Invert(self, *args: Any) -> void: ...
    def Inverted(self, *args: Any) -> gp_Trsf2d: ...
    def IsNegative(self, *args: Any) -> Standard_Boolean: ...
    def Multiplied(self, *args: Any) -> gp_Trsf2d: ...
    def Multiply(self, *args: Any) -> void: ...
    def Power(self, *args: Any) -> void: ...
    def Powered(self, *args: Any) -> gp_Trsf2d: ...
    def PreMultiply(self, *args: Any) -> void: ...
    def RotationPart(self, *args: Any) -> Standard_Real: ...
    def ScaleFactor(self, *args: Any) -> Standard_Real: ...
    def SetMirror(self, *args: Any) -> void: ...
    def SetRotation(self, *args: Any) -> void: ...
    def SetScale(self, *args: Any) -> void: ...
    def SetScaleFactor(self, *args: Any) -> void: ...
    def SetTransformation(self, *args: Any) -> void: ...
    def SetTranslation(self, *args: Any) -> void: ...
    def SetTranslationPart(self, *args: Any) -> void: ...
    def SetValues(self, *args: Any) -> void: ...
    def Transforms(self, *args: Any) -> void: ...
    def TranslationPart(self, *args: Any) -> 'gp_XY const': ...
    def Value(self, *args: Any) -> Standard_Real: ...
    def VectorialPart(self, *args: Any) -> gp_Mat2d: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_Trsf2d: ...
    def __imul_wrapper__(self, other: gp_Trsf2d) -> void: ...
    def __imul__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_Vec:
    thisown: Any = ...
    def Add(self, *args: Any) -> void: ...
    def Added(self, *args: Any) -> gp_Vec: ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def AngleWithRef(self, *args: Any) -> Standard_Real: ...
    def Coord(self, *args: Any) -> void: ...
    def Cross(self, *args: Any) -> void: ...
    def CrossCross(self, *args: Any) -> void: ...
    def CrossCrossed(self, *args: Any) -> gp_Vec: ...
    def CrossMagnitude(self, *args: Any) -> Standard_Real: ...
    def CrossSquareMagnitude(self, *args: Any) -> Standard_Real: ...
    def Crossed(self, *args: Any) -> gp_Vec: ...
    def Divide(self, *args: Any) -> void: ...
    def Divided(self, *args: Any) -> gp_Vec: ...
    def Dot(self, *args: Any) -> Standard_Real: ...
    def DotCross(self, *args: Any) -> Standard_Real: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def IsNormal(self, *args: Any) -> Standard_Boolean: ...
    def IsOpposite(self, *args: Any) -> Standard_Boolean: ...
    def IsParallel(self, *args: Any) -> Standard_Boolean: ...
    def Magnitude(self, *args: Any) -> Standard_Real: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Vec: ...
    def Multiplied(self, *args: Any) -> gp_Vec: ...
    def Multiply(self, *args: Any) -> void: ...
    def Normalize(self, *args: Any) -> void: ...
    def Normalized(self, *args: Any) -> gp_Vec: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Vec: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Vec: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Vec: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetLinearForm(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetXYZ(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def SetZ(self, *args: Any) -> void: ...
    def SquareMagnitude(self, *args: Any) -> Standard_Real: ...
    def Subtract(self, *args: Any) -> void: ...
    def Subtracted(self, *args: Any) -> gp_Vec: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Vec: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def XYZ(self, *args: Any) -> 'gp_XYZ const': ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def Z(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> Standard_Real: ...
    def __imul_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __imul__(self, right: Any): ...
    def __add__(self, *args: Any) -> gp_Vec: ...
    def __iadd_wrapper__(self, other: gp_Vec) -> void: ...
    def __iadd__(self, right: Any): ...
    def __sub__(self, *args: Any) -> gp_Vec: ...
    def __neg__(self, *args: Any) -> gp_Vec: ...
    def __isub_wrapper__(self, other: gp_Vec) -> void: ...
    def __isub__(self, right: Any): ...
    def __truediv__(self, *args: Any): ...
    __div__: Any = ...
    def __itruediv_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __itruediv__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_Vec2d:
    thisown: Any = ...
    def Add(self, *args: Any) -> void: ...
    def Added(self, *args: Any) -> gp_Vec2d: ...
    def Angle(self, *args: Any) -> Standard_Real: ...
    def Coord(self, *args: Any) -> void: ...
    def CrossMagnitude(self, *args: Any) -> Standard_Real: ...
    def CrossSquareMagnitude(self, *args: Any) -> Standard_Real: ...
    def Crossed(self, *args: Any) -> Standard_Real: ...
    def Divide(self, *args: Any) -> void: ...
    def Divided(self, *args: Any) -> gp_Vec2d: ...
    def Dot(self, *args: Any) -> Standard_Real: ...
    def GetNormal(self, *args: Any) -> gp_Vec2d: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def IsNormal(self, *args: Any) -> Standard_Boolean: ...
    def IsOpposite(self, *args: Any) -> Standard_Boolean: ...
    def IsParallel(self, *args: Any) -> Standard_Boolean: ...
    def Magnitude(self, *args: Any) -> Standard_Real: ...
    def Mirror(self, *args: Any) -> void: ...
    def Mirrored(self, *args: Any) -> gp_Vec2d: ...
    def Multiplied(self, *args: Any) -> gp_Vec2d: ...
    def Multiply(self, *args: Any) -> void: ...
    def Normalize(self, *args: Any) -> void: ...
    def Normalized(self, *args: Any) -> gp_Vec2d: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_Vec2d: ...
    def Rotate(self, *args: Any) -> void: ...
    def Rotated(self, *args: Any) -> gp_Vec2d: ...
    def Scale(self, *args: Any) -> void: ...
    def Scaled(self, *args: Any) -> gp_Vec2d: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetLinearForm(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetXY(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def SquareMagnitude(self, *args: Any) -> Standard_Real: ...
    def Subtract(self, *args: Any) -> void: ...
    def Subtracted(self, *args: Any) -> gp_Vec2d: ...
    def Transform(self, *args: Any) -> void: ...
    def Transformed(self, *args: Any) -> gp_Vec2d: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def XY(self, *args: Any) -> 'gp_XY const': ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_Vec2d: ...
    def __imul_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __imul__(self, right: Any): ...
    def __add__(self, *args: Any) -> gp_Vec2d: ...
    def __iadd_wrapper__(self, other: gp_Vec2d) -> void: ...
    def __iadd__(self, right: Any): ...
    def __neg__(self, *args: Any) -> gp_Vec2d: ...
    def __sub__(self, *args: Any) -> gp_Vec2d: ...
    def __isub_wrapper__(self, other: gp_Vec2d) -> void: ...
    def __isub__(self, right: Any): ...
    def __truediv__(self, *args: Any): ...
    __div__: Any = ...
    def __itruediv_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __itruediv__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_XY:
    thisown: Any = ...
    def Add(self, *args: Any) -> void: ...
    def Added(self, *args: Any) -> gp_XY: ...
    def GetChangeCoord(self, theIndex: 'Standard_Integer const') -> Standard_Real: ...
    def SetChangeCoord(self, theIndex: 'Standard_Integer const', value: Standard_Real) -> void: ...
    def Coord(self, *args: Any) -> void: ...
    def CrossMagnitude(self, *args: Any) -> Standard_Real: ...
    def CrossSquareMagnitude(self, *args: Any) -> Standard_Real: ...
    def Crossed(self, *args: Any) -> Standard_Real: ...
    def Divide(self, *args: Any) -> void: ...
    def Divided(self, *args: Any) -> gp_XY: ...
    def Dot(self, *args: Any) -> Standard_Real: ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def Modulus(self, *args: Any) -> Standard_Real: ...
    def Multiplied(self, *args: Any) -> gp_XY: ...
    def Multiply(self, *args: Any) -> void: ...
    def Normalize(self, *args: Any) -> void: ...
    def Normalized(self, *args: Any) -> gp_XY: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_XY: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetLinearForm(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def SquareModulus(self, *args: Any) -> Standard_Real: ...
    def Subtract(self, *args: Any) -> void: ...
    def Subtracted(self, *args: Any) -> gp_XY: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_XY: ...
    def __imul__(self, right: Any): ...
    def __imul__(self, right: Any): ...
    def __imul_wrapper__(self, *args: Any) -> void: ...
    def __imul__(self, right: Any): ...
    def __add__(self, *args: Any) -> gp_XY: ...
    def __iadd_wrapper__(self, other: gp_XY) -> void: ...
    def __iadd__(self, right: Any): ...
    def __neg__(self, *args: Any) -> gp_XY: ...
    def __sub__(self, *args: Any) -> gp_XY: ...
    def __isub_wrapper__(self, other: gp_XY) -> void: ...
    def __isub__(self, right: Any): ...
    def __truediv__(self, *args: Any): ...
    __div__: Any = ...
    def __itruediv_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __itruediv__(self, right: Any): ...
    __swig_destroy__: Any = ...

class gp_XYZ:
    thisown: Any = ...
    def Add(self, *args: Any) -> void: ...
    def Added(self, *args: Any) -> gp_XYZ: ...
    def GetChangeCoord(self, theIndex: 'Standard_Integer const') -> Standard_Real: ...
    def SetChangeCoord(self, theIndex: 'Standard_Integer const', value: Standard_Real) -> void: ...
    def ChangeData(self, *args: Any) -> 'Standard_Real *': ...
    def Coord(self, *args: Any) -> void: ...
    def Cross(self, *args: Any) -> void: ...
    def CrossCross(self, *args: Any) -> void: ...
    def CrossCrossed(self, *args: Any) -> gp_XYZ: ...
    def CrossMagnitude(self, *args: Any) -> Standard_Real: ...
    def CrossSquareMagnitude(self, *args: Any) -> Standard_Real: ...
    def Crossed(self, *args: Any) -> gp_XYZ: ...
    def Divide(self, *args: Any) -> void: ...
    def Divided(self, *args: Any) -> gp_XYZ: ...
    def Dot(self, *args: Any) -> Standard_Real: ...
    def DotCross(self, *args: Any) -> Standard_Real: ...
    def DumpJsonToString(self, depth: int=...) -> 'std::string': ...
    def GetData(self, *args: Any) -> 'Standard_Real const *': ...
    def IsEqual(self, *args: Any) -> Standard_Boolean: ...
    def Modulus(self, *args: Any) -> Standard_Real: ...
    def Multiplied(self, *args: Any) -> gp_XYZ: ...
    def Multiply(self, *args: Any) -> void: ...
    def Normalize(self, *args: Any) -> void: ...
    def Normalized(self, *args: Any) -> gp_XYZ: ...
    def Reverse(self, *args: Any) -> void: ...
    def Reversed(self, *args: Any) -> gp_XYZ: ...
    def SetCoord(self, *args: Any) -> void: ...
    def SetLinearForm(self, *args: Any) -> void: ...
    def SetX(self, *args: Any) -> void: ...
    def SetY(self, *args: Any) -> void: ...
    def SetZ(self, *args: Any) -> void: ...
    def SquareModulus(self, *args: Any) -> Standard_Real: ...
    def Subtract(self, *args: Any) -> void: ...
    def Subtracted(self, *args: Any) -> gp_XYZ: ...
    def X(self, *args: Any) -> Standard_Real: ...
    def Y(self, *args: Any) -> Standard_Real: ...
    def Z(self, *args: Any) -> Standard_Real: ...
    def __init__(self, *args: Any) -> None: ...
    def __mul__(self, *args: Any) -> gp_XYZ: ...
    def __imul__(self, right: Any): ...
    def __imul__(self, right: Any): ...
    def __imul_wrapper__(self, *args: Any) -> void: ...
    def __imul__(self, right: Any): ...
    def __add__(self, *args: Any) -> gp_XYZ: ...
    def __iadd_wrapper__(self, other: gp_XYZ) -> void: ...
    def __iadd__(self, right: Any): ...
    def __sub__(self, *args: Any) -> gp_XYZ: ...
    def __isub_wrapper__(self, other: gp_XYZ) -> void: ...
    def __isub__(self, right: Any): ...
    def __truediv__(self, *args: Any): ...
    __div__: Any = ...
    def __itruediv_wrapper__(self, other: 'Standard_Real const') -> void: ...
    def __itruediv__(self, right: Any): ...
    __swig_destroy__: Any = ...
